{
	"Inline DSU": {
		"scope": "cpp",
		"prefix": "_z_DUS_inline",
		"body": [
			"std::vector<int> dad(n + 1, -1);",
			"auto Find = [&](auto &&Find, int x) -> int {",
			"    if (dad[x] == -1)",
			"        return x;",
			"    return dad[x] = Find(Find, dad[x]);",
			"};",
			"auto Merge = [&](int a, int b) -> bool {",
			"    a = Find(Find, a); b = Find(Find, b);",
			"    if (a == b)",
			"        return false;",
			"    dad[a] = b;",
			"    return true;",
			"};",
			"auto IsSame = [&](int a, int b) -> bool {",
			"    return Find(Find, a) == Find(Find, b);",
			"};"
		],
		"description": "Inline DSU",
	},
	"Inline Binary Indexed Tree": {
		"scope": "cpp",
		"prefix": "_z_BIT_inline",
		"body": [
			"std::vector<int> bit(n + 1);",
			"auto Set = [&](int x, int d) -> void {",
			"    for (int i = x; i <= n; i += i & -i)",
			"        bit[i] += d;",
			"};",
			"auto Get = [&](int x) -> int {",
			"    int ret = 0;",
			"    for (int i = x; i > 0; i -= i & -i)",
			"        ret += bit[i];",
			"    return ret;",
			"};",
		],
		"description": "Inline Binary Indexed Tree"
	},
}