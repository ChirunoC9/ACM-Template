{
	// Place your Cont 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// "code" {
	// 	"scope": "c++",
	// 	"prefix": "code",
	// 	"body": [
	// 		"#include <bits/stdc++.H"
	// 	]
	// }
	"Basic Code": {
		"prefix": "BasicCode",
		"scope": "c++,cpp,cxx",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"template <typename T> constexpr T inf = std::numeric_limits<T>::max() / 2;",
			"using i64 = int64_t;",
			"",
			"void solve() {",
			"\t$0",
			"}",
			"",
			"int main() {",
			"\tstd::cin.tie(nullptr)->sync_with_stdio(false);",
			"",
			"\tint test = 1;",
			"\tstd::cin >> test;",
			"",
			"\twhile (test --) {",
			"\t\tsolve();",
			"\t}",
			"}"
		]
	},
	"Basic Tempalte Code": {
		"prefix": "MultipleTestsCode",
		"scope": "c++,cpp,cxx",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			// "#if !defined (ONLINE_JUDGE)",
			// "\t#include \"debug.hpp\"",
			// "#else",
			// "\t#define debug(...)",
			// "#endif",
			"#if !defined (ONLINE_JUDGE)",
			"#  include \"./include/debug.hpp\"",
			"#else",
			"#  define debug(...)  // なんでもいい",
			"#endif",
			"",
			"template <typename T, std::strict_weak_order<T,T> Compare = std::greater<T>> using Heap = std::priority_queue<T, std::vector<T>, Compare>;",
			// "#if __cplusplus >= 202002L",
			// "template <typename T, std::strict_weak_order<T,T> Compare = std::greater<T>>",
			// "#else",
			// "template <typename T, typename Compare = std::greater<T>>",
			// "#endif",
			// "using Heap = std::priority_queue<T, std::vector<T>, Compare>;",
			"template <typename T> using Stack = std::stack<T, std::vector<T>>;",
			"template <typename T> using Queue = std::queue<T, std::list<T>>;",
			"",
			"using i8 = std::int8_t;",
			"using u8 = std::uint8_t;",
			"using i16 = std::int16_t;",
			"using u16 = std::uint16_t;",  
			"using i32 = std::int32_t;",
			"using u32 = std::uint32_t;",
			"using i64 = std::int64_t;",
			"using u64 = std::uint64_t;",
			"using i128 = __int128_t;",
			"using u128 = __uint128_t;",
			"using f32 = float;",
			"using f64 = double;",
			"using f128 = long double;",
			"",
			"template <typename Type> constexpr Type inf = std::numeric_limits<Type>::max() / 2;",
			// "std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());",
			// "std::mt19937_64 rng64(std::chrono::steady_clock::now().time_since_epoch().count());",
			"",
			"using namespace std;",
			// "",
			// "#define Yes std::cout << \"Yes\\n\"",
			// "#define YES std::cout << \"YES\\n\"",
			// "#define No std::cout << \"No\\n\"",
			// "#define NO std::cout << \"NO\\n\"",
			"",
			// "namespace std::ranges::macro { ",
			// "\tauto Main() -> void {",
			// "\t\t$0",
			// "\t}",
			// "}",
			// "namespace std::ranges::macro",
			// "{"
			// "auto Main() -> void {",
			// "\t$0",
			// "}",
			// "}",
			"namespace std::ranges::macro { ",
			"\tauto Main() -> void;",
			"}",
			// "",
			"void std::ranges::macro::Main() {",
			"\t$0",
			"}",
			// "void Main() {",
			// "\t$0",
			// "}",
			"",
			"int main() {",
			"\tstd::cin.tie(nullptr)->sync_with_stdio(false);",
			"\tstd::cout << std::fixed << std::setprecision(15);",
			"",
			"\tint test = 1;",
			"\tcin >> test;",
			"",
			"\tfor (int rp = 1; test --> 0; rp ++) {",
			"\t\tdebug(rp);",
			"\t\tstd::ranges::macro::Main();",
			"#ifndef ONLINE_JUDGE",
			"\t\tstd::cerr << std::endl;",
			"#endif",
			// "\t\tMain();",
			"\t}",
			"}"
		],
		"description": "Basic Tempalte Code"
	  },
	"Debug Header File": {
		"prefix": "DebugHeader",
		"scope": "c++, cpp, cxx",
		"body": [
			"#if !defined (ONLINE_JUDGE)",
			"#  include \"./include/debug.hpp\"",
			"#else",
			"#  define debug(...)",
			"#endif",
		]
	},
	"SBasic Tempalte Code": {
		"prefix": "Atcoder",
		"scope": "c++,cpp,cxx",
		"body": [
			"#include <bits/stdc++.h>",
			"",
		//   "#if !defined (ONLINE_JUDGE)",
		//   "\t#include \"debug.hpp\"",
		//   "#else",
		//   "\t#define debug(...)",
		//   "#endif",
			"#if !defined (ONLINE_JUDGE)",
			"#  include \"./include/debug.hpp\"",
			"#else",
			"#  define debug(...)",
			"#endif",
			"",
			"template <typename T, typename Compare = std::greater<T>>",
			"using Heap = std::priority_queue<T, std::vector<T>, Compare>;",
			"template <typename T>",
			"using Stack = std::stack<T, std::vector<T>>;",
			"template <typename T>",
			"using Queue = std::queue<T, std::list<T>>;",
			"",
			"using i8 = std::int8_t;",
			"using u8 = std::uint8_t;",
			"using i16 = std::int16_t;",
			"using u16 = std::uint16_t;",  
			"using i32 = std::int32_t;",
			"using u32 = std::uint32_t;",
			"using i64 = std::int64_t;",
			"using u64 = std::uint64_t;",
			"using i128 = __int128_t;",
			"using u128 = __uint128_t;",
			"using f32 = float;",
			"using f64 = double;",
			"using f128 = long double;",
			"",
			"template <typename T>",
			"constexpr T inf = std::numeric_limits<T>::max() / 2;",
			"std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());",
			"std::mt19937_64 rng64(std::chrono::steady_clock::now().time_since_epoch().count());",
			"",
			"using namespace std;",
			// "",
			// "#define Yes std::cout << \"Yes\\n\"",
			// "#define YES std::cout << \"YES\\n\"",
			// "#define No std::cout << \"No\\n\"",
			// "#define NO std::cout << \"NO\\n\"",
			"",
			"void Main() {",
			"\t$0",
			"}",
			"",
			"int main() {",
			"\tstd::cin.tie(nullptr)->sync_with_stdio(false);",
			"\tstd::cout << std::fixed << std::setprecision(15);",
			"",
			"\tint test = 1;",
			"\t//cin >> test;",
			"",
			"\tfor (int rp = 1; test --> 0; rp ++) {",
			"\t\tdebug(rp);",
			"\t\tMain();",
			"\t}",
			"}"
		],
		"description": "Basic Tempalte Code"
	  },
	  "Inline Sorted Unique": {
		"prefix": "InlineSortedUnique",
		"scope": "cpp, cxx, c++",
		"body": [
			"auto Unique = [](auto &&ls) -> void { std::sort(ls.begin(), ls.end()); ls.erase(std::unique(ls.begin(), ls.end()), ls.end()); };",
		],
		"description": "Inline Sorted Unique"
	  },
	  "Infinity": {
		"prefix": "InfinityValue",
		"scope": "c++, cxx, cpp",
		"body": [
			"template <typename Type> constexpr Type inf = std::numeric_limits<Type>::max() / 2;"
		],
		"description": "Infinity"
	  },
	  "IO For Int128": {
		"prefix": "IOInt128",
		"scope": "cpp, cxx, c++",
		"body": [
			"std::istream& operator >> (std::istream &is, __int128_t &x) {",
			"\tx = 0;",
			"\tstd::string s; is >> s;",
			"\tbool flag = false;",
			"\tfor (auto ch : s)",
			"\t\tif (ch == '-') flag = true;",	
			"\t\telse x = x * 10 + (ch ^ 48);",
			"\tif (flag) x = -x;",
			"\treturn is;",
			"}",
			"std::ostream& operator << (std::ostream &os, __int128_t x) {",
			"\tif (x == 0) return os << '0';",
			"\tbool flag = false;",
			"\tif (x < 0) x = -x, flag = true;",
			"\tstd::string s;",
			"\twhile (x > 0) s += char(x % 10 + '0'), x /= 10;",
			"\tif (flag) s += '-';",
			"\tstd::reverse(s.begin(), s.end());",
			"\treturn os << s;",
			"}"
		],
		"description": "IO For Int128"
	  },
	  "C++ Type Like Rust": {
		"prefix": "RustType",
		"scope": "c++, cpp, cxx",
		"body": [
			"using i8 = std::int8_t;",
			"using u8 = std::uint8_t;",
			"using i16 = std::int16_t;",
			"using u16 = std::uint16_t;",  
			"using i32 = std::int32_t;",
			"using u32 = std::uint32_t;",
			"using i64 = std::int64_t;",
			"using u64 = std::uint64_t;",
			"using i128 = __int128_t;",
			"using u128 = __uint128_t;",
			"using f32 = float;",
			"using f64 = double;",
			"using f128 = long double;",
		],
		"description": "C++ Type Like Rust"
	  },
}