{
	"FenwickTree": {
		"prefix": "FenwickTree",
		"scope": "c++, cpp, cxx",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "template <typename Type, typename Operator = std::plus<Type>> requires requires(Type a, Type b, Operator opt) {",
		  "\t{opt(a, b)} -> std::convertible_to<Type>;",
		  "} class FenwickTree {",
		  "public:",
		  "\tFenwickTree(int size, Type initValue = Type{}, Operator opt = Operator{}) ",
		  "\t\t: bit(size + 1, initValue), opt(opt) {}",
		  "",
		  "\tvoid Assign(int size, Type value) {",
		  "\t\tbit.Assign(size, value);",
		  "\t}",
		  "",
		  "\tvoid Reserve(int size) {",
		  "\t\tbit.reserve(size);",
		  "\t}",
		  "",
		  "\tvoid Update(int idx, Type dx) {",
		  "\t\tfor (int i = idx + 1; i < (int)bit.size(); i += Lowbit(i)) {",
		  "\t\t\tbit[i] = opt(bit[i], dx);",
		  "\t\t}",
		  "\t}",
		  "",
		  "\tvoid Get(int idx, Type result = {}) {",
		  "\t\tfor (int i = idx + 1; i > 0; i -= Lowbit(i)) {",
		  "\t\t\tresult = opt(result, bit[i]);",
		  "\t\t}",
		  "\t\treturn result;",
		  "\t}",
		  "",
		  "private:",
		  "\tconstexpr static int Lowbit(int x) noexcept {",
		  "\t\treturn x & -x;",
		  "\t}",
		  "",
		  "\tstd::vector<Type> bit;",
		  "\tOperator opt;",
		  "};"
		],
		"description": "FenwickTree"
	  },
	  "InlineFenwickTree": {
		"prefix": "InlineFenwickTree",
		"scope": "c++,cpp,cxx",
		"body": [
		  "std::vector<int> bit(n + 1);",
		  "auto Add = [&](int x, int n, int dx) {",
		  "\tfor (int i = x; i <= n; i += i & -i) {",
		  "\t\tbit[i] += dx;",
		  "\t}",
		  "};",
		  "auto Ask = [&](int x) {",
		  "\tint ret = 0;",
		  "\tfor (int i = x; i > 0; i -= i & -i) {",
		  "\t\tret += bit[i];",
		  "\t}",
		  "\treturn ret;",
		  "};"
		],
		"description": "InlineFenwickTree"
	  },
}